#!/usr/bin/env just --justfile

set shell := ["bash", "-c"]

# Default recipe lists available commands
default:
    @just --list


# Cloudflare deployment commands - basics

# Check if wrangler is installed and authenticated
cf-doctor:
    @echo "Checking Cloudflare setup..."
    @which wrangler || (echo "Error: wrangler not found. Install with: bun install -g wrangler" && exit 1)
    @wrangler whoami || (echo "Error: Not authenticated. Run: wrangler login" && exit 1)
    @echo "âœ“ Wrangler is installed and authenticated"

# Guide user through putting secrets from .env file to remote secrets store
cf-setup-secrets env_file="../../backend/.env":
    @echo "Run these commands manually to paste in the relevant secrets for the Python backend:"
    @echo "  wrangler secret put --env production GOOGLE_SEARCH_API_KEY"
    @echo "  wrangler secret put --env production GOOGLE_SEARCH_ENGINE_ID"
    @echo "  wrangler secret put --env production GROQ_API_KEY"

cf-list-secrets:
    wrangler secret list --env production | jq -r '.[].name'

# Build frontend for Cloudflare deployment
cf-build-frontend:
    @echo "Building frontend for Cloudflare deployment..."
    cd ../.. && just frontend-build-cloudflare

cf-dev:
    # wrangler dev mode = frontend in staging mode
    # we run "build-image-staging" image and worker at localhost:30000
    # Chrome dev tools available
    wrangler dev --env production --port 30000

cf-dev-exec cmd="/bin/bash":
    docker exec -it $(docker ps --format json | \
        jq -r 'select(.Image | contains("cloudflare-dev/perplexed")) | .ID') \
        {{ cmd }}

cf-dev-tail:
    just cf-dev-exec 'tail -f /var/log/app/backend.log'

# Deploy to Cloudflare (using remote build)
cf-deploy:
    @echo "Deploying to Cloudflare..."
    wrangler deploy --env production

cf-tail:
    wrangler tail perplexed-worker --format pretty --env production

cf-status:
    wrangler deployments status --env production
